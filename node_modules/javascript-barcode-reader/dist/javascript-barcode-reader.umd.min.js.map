{"version":3,"file":"javascript-barcode-reader.umd.min.js","sources":["../src/codabar/index.ts","../src/code-128/index.ts","../src/code-39/index.ts","../src/code-93/index.ts","../src/code2of5/index.ts","../src/ean/index.ts","../src/utilities/BARCODE_DECODERS.ts","../src/utilities/combineAllPossible.ts","../src/utilities/createImageData.ts","../src/utilities/getImageDataFromSource.ts","../src/utilities/getLines.ts","../src/index.ts","../src/utilities/isUrl.ts","../src/utilities/adaptiveThreshold.ts"],"sourcesContent":["const CHAR_SET: {\n  [key: string]: string\n} = {\n  nnnnnww: '0',\n  nnnnwwn: '1',\n  nnnwnnw: '2',\n  wwnnnnn: '3',\n  nnwnnwn: '4',\n  wnnnnwn: '5',\n  nwnnnnw: '6',\n  nwnnwnn: '7',\n  nwwnnnn: '8',\n  wnnwnnn: '9',\n  nnnwwnn: '-',\n  nnwwnnn: '$',\n  wnnnwnw: ':',\n  wnwnnnw: '/',\n  wnwnwnn: '.',\n  nnwwwww: '+',\n  nnwwnwn: 'A',\n  nnnwnww: 'B',\n  nwnwnnw: 'C',\n  nnnwwwn: 'D',\n}\n\nexport function decoder(lines: number[]): string {\n  const code = []\n\n  const barThreshold = Math.ceil(lines.reduce((pre, item) => (pre + item) / 2, 0))\n\n  // Read one encoded character at a time.\n  while (lines.length > 0) {\n    const seg = lines.splice(0, 8).splice(0, 7)\n    const a = seg.map(line => (line < barThreshold ? 'n' : 'w')).join('')\n\n    code.push(CHAR_SET[a])\n  }\n\n  return code.join('')\n}\n","const WIDTH_TBL = [\n  '212222',\n  '222122',\n  '222221',\n  '121223',\n  '121322',\n  '131222',\n  '122213',\n  '122312',\n  '132212',\n  '221213',\n  '221312',\n  '231212',\n  '112232',\n  '122132',\n  '122231',\n  '113222',\n  '123122',\n  '123221',\n  '223211',\n  '221132',\n  '221231',\n  '213212',\n  '223112',\n  '312131',\n  '311222',\n  '321122',\n  '321221',\n  '312212',\n  '322112',\n  '322211',\n  '212123',\n  '212321',\n  '232121',\n  '111323',\n  '131123',\n  '131321',\n  '112313',\n  '132113',\n  '132311',\n  '211313',\n  '231113',\n  '231311',\n  '112133',\n  '112331',\n  '132131',\n  '113123',\n  '113321',\n  '133121',\n  '313121',\n  '211331',\n  '231131',\n  '213113',\n  '213311',\n  '213131',\n  '311123',\n  '311321',\n  '331121',\n  '312113',\n  '312311',\n  '332111',\n  '314111',\n  '221411',\n  '431111',\n  '111224',\n  '111422',\n  '121124',\n  '121421',\n  '141122',\n  '141221',\n  '112214',\n  '112412',\n  '122114',\n  '122411',\n  '142112',\n  '142211',\n  '241211',\n  '221114',\n  '413111',\n  '241112',\n  '134111',\n  '111242',\n  '121142',\n  '121241',\n  '114212',\n  '124112',\n  '124211',\n  '411212',\n  '421112',\n  '421211',\n  '212141',\n  '214121',\n  '412121',\n  '111143',\n  '111341',\n  '131141',\n  '114113',\n  '114311',\n  '411113',\n  '411311',\n  '113141',\n  '114131',\n  '311141',\n  '411131',\n  '211412',\n  '211214',\n  '211232',\n  '233111',\n  '211133',\n  '2331112',\n]\n\nconst TBL_A = [\n  ' ',\n  '!',\n  '\"',\n  '#',\n  '$',\n  '%',\n  '&',\n  \"'\",\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '<',\n  '=',\n  '>',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '\\\\',\n  ']',\n  '^',\n  '_',\n  'NUL',\n  'SOH',\n  'STX',\n  'ETX',\n  'EOT',\n  'ENQ',\n  'ACK',\n  'BEL',\n  'BS',\n  'HT',\n  'LF',\n  'VT',\n  'FF',\n  'CR',\n  'SO',\n  'SI',\n  'DLE',\n  'DC1',\n  'DC2',\n  'DC3',\n  'DC4',\n  'NAK',\n  'SYN',\n  'ETB',\n  'CAN',\n  'EM',\n  'SUB',\n  'ESC',\n  'FS',\n  'GS',\n  'RS',\n  'US',\n  'FNC 3',\n  'FNC 2',\n  'Shift B',\n  'Code C',\n  'Code B',\n  'FNC 4',\n  'FNC 1',\n  'Code A',\n  'Code B',\n  'Code C',\n  'Stop',\n  'Reverse Stop',\n]\n\nconst TBL_B = [\n  ' ',\n  '!',\n  '\"',\n  '#',\n  '$',\n  '%',\n  '&',\n  \"'\",\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '<',\n  '=',\n  '>',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '\\\\',\n  ']',\n  '^',\n  '_',\n  '`',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '{',\n  '|',\n  '}',\n  '~',\n  'DEL',\n  'FNC 3',\n  'FNC 2',\n  'Shift A',\n  'Code C',\n  'FNC 4',\n  'Code A',\n  'FNC 1',\n  'Code A',\n  'Code B',\n  'Code C',\n  'Stop',\n  'Reverse Stop',\n]\n\nconst TBL_C = [\n  '00',\n  '01',\n  '02',\n  '03',\n  '04',\n  '05',\n  '06',\n  '07',\n  '08',\n  '09',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '30',\n  '31',\n  '32',\n  '33',\n  '34',\n  '35',\n  '36',\n  '37',\n  '38',\n  '39',\n  '40',\n  '41',\n  '42',\n  '43',\n  '44',\n  '45',\n  '46',\n  '47',\n  '48',\n  '49',\n  '50',\n  '51',\n  '52',\n  '53',\n  '54',\n  '55',\n  '56',\n  '57',\n  '58',\n  '59',\n  '60',\n  '61',\n  '62',\n  '63',\n  '64',\n  '65',\n  '66',\n  '67',\n  '68',\n  '69',\n  '70',\n  '71',\n  '72',\n  '73',\n  '74',\n  '75',\n  '76',\n  '77',\n  '78',\n  '79',\n  '80',\n  '81',\n  '82',\n  '83',\n  '84',\n  '85',\n  '86',\n  '87',\n  '88',\n  '89',\n  '90',\n  '91',\n  '92',\n  '93',\n  '94',\n  '95',\n  '96',\n  '97',\n  '98',\n  '99',\n  'Code B',\n  'Code A',\n  'FNC 1',\n  'Code A',\n  'Code B',\n  'Code C',\n  'Stop',\n  'Reverse Stop',\n]\n\nconst computeGroup = (lines: number[]): number[] => {\n  const count = lines.length - 13\n  const factor =\n    lines.reduce((pre, item, i) => {\n      if (i >= count) return pre\n\n      return pre + item\n    }, 0) /\n    (Math.ceil(count / 6) * 11)\n\n  return lines.map(item => Math.round(item / factor) || 1)\n}\n\nexport function decoder(lines: number[]): string {\n  const code = []\n  let lookupTBL = TBL_B\n  // let sumOP = 0\n  let letterKey\n  let letterCodePrev\n\n  const computedLines = computeGroup(lines)\n\n  if (!computedLines) return ''\n\n  // extract terminal bar\n  computedLines.pop()\n\n  // skip check code and stop code using -13\n  for (let i = 0; i * 6 < computedLines.length - 13; i += 1) {\n    letterKey = computedLines.slice(i * 6, (i + 1) * 6).join('')\n    const keyIndex = WIDTH_TBL.indexOf(letterKey)\n    const letterCode = lookupTBL[keyIndex]\n    // sumOP += i * keyIndex\n\n    switch (letterCode) {\n      case 'Code A':\n        lookupTBL = TBL_A\n        break\n      case 'Code B':\n        lookupTBL = TBL_B\n        break\n      case 'Code C':\n        lookupTBL = TBL_C\n        break\n      case 'FNC 4':\n        break\n      default:\n        if (letterCode) {\n          if (letterCodePrev === 'FNC 4') {\n            code.push(letterCode.charCodeAt(0) + 128)\n          } else {\n            code.push(letterCode)\n          }\n\n          letterCodePrev = letterCode\n        } else {\n          code.push('?')\n        }\n        break\n    }\n  }\n\n  // letterKey = computedLines.slice(0, 6).join('')\n  // if (sumOP % 103 !== WIDTH_TBL.indexOf(letterKey)) return ''\n\n  return code.join('')\n}\n","const CHAR_SET: {\n  [key: string]: string\n} = {\n  nnnwwnwnn: '0',\n  wnnwnnnnw: '1',\n  nnwwnnnnw: '2',\n  wnwwnnnnn: '3',\n  nnnwwnnnw: '4',\n  wnnwwnnnn: '5',\n  nnwwwnnnn: '6',\n  nnnwnnwnw: '7',\n  wnnwnnwnn: '8',\n  nnwwnnwnn: '9',\n  wnnnnwnnw: 'A',\n  nnwnnwnnw: 'B',\n  wnwnnwnnn: 'C',\n  nnnnwwnnw: 'D',\n  wnnnwwnnn: 'E',\n  nnwnwwnnn: 'F',\n  nnnnnwwnw: 'G',\n  wnnnnwwnn: 'H',\n  nnwnnwwnn: 'I',\n  nnnnwwwnn: 'J',\n  wnnnnnnww: 'K',\n  nnwnnnnww: 'L',\n  wnwnnnnwn: 'M',\n  nnnnwnnww: 'N',\n  wnnnwnnwn: 'O',\n  nnwnwnnwn: 'P',\n  nnnnnnwww: 'Q',\n  wnnnnnwwn: 'R',\n  nnwnnnwwn: 'S',\n  nnnnwnwwn: 'T',\n  wwnnnnnnw: 'U',\n  nwwnnnnnw: 'V',\n  wwwnnnnnn: 'W',\n  nwnnwnnnw: 'X',\n  wwnnwnnnn: 'Y',\n  nwwnwnnnn: 'Z',\n  nwnnnnwnw: '-',\n  wwnnnnwnn: '.',\n  nwwnnnwnn: ' ',\n  nwnwnwnnn: '$',\n  nwnwnnnwn: '/',\n  nwnnnwnwn: '+',\n  nnnwnwnwn: '%',\n  nwnnwnwnn: '*',\n}\n\nexport function decoder(lines: number[]): string {\n  const code = []\n\n  const barThreshold = Math.ceil(lines.reduce((pre, item) => pre + item, 0) / lines.length)\n\n  // Read one encoded character at a time.\n  while (lines.length > 0) {\n    const sequenceBar = lines\n      .splice(0, 10)\n      .map(line => (line > barThreshold ? 'w' : 'n'))\n      .slice(0, 9)\n      .join('')\n\n    code.push(CHAR_SET[sequenceBar])\n  }\n\n  if (code.pop() !== '*' || code.shift() !== '*') return ''\n\n  return code.join('')\n}\n","interface CharValue {\n  [key: string]: string\n}\n\nconst CHAR_SET: CharValue[] = [\n  { '100010100': '0' },\n  { '101001000': '1' },\n  { '101000100': '2' },\n  { '101000010': '3' },\n  { '100101000': '4' },\n  { '100100100': '5' },\n  { '100100010': '6' },\n  { '101010000': '7' },\n  { '100010010': '8' },\n  { '100001010': '9' },\n  { '110101000': 'A' },\n  { '110100100': 'B' },\n  { '110100010': 'C' },\n  { '110010100': 'D' },\n  { '110010010': 'E' },\n  { '110001010': 'F' },\n  { '101101000': 'G' },\n  { '101100100': 'H' },\n  { '101100010': 'I' },\n  { '100110100': 'J' },\n  { '100011010': 'K' },\n  { '101011000': 'L' },\n  { '101001100': 'M' },\n  { '101000110': 'N' },\n  { '100101100': 'O' },\n  { '100010110': 'P' },\n  { '110110100': 'Q' },\n  { '110110010': 'R' },\n  { '110101100': 'S' },\n  { '110100110': 'T' },\n  { '110010110': 'U' },\n  { '110011010': 'V' },\n  { '101101100': 'W' },\n  { '101100110': 'X' },\n  { '100110110': 'Y' },\n  { '100111010': 'Z' },\n  { '100101110': '-' },\n  { '111010100': '.' },\n  { '111010010': ' ' },\n  { '111001010': '$' },\n  { '101101110': '/' },\n  { '101110110': '+' },\n  { '110101110': '%' },\n  { '100100110': '($)' },\n  { '111011010': '(%)' },\n  { '111010110': '(/)' },\n  { '100110010': '(+)' },\n  { '101011110': '*' },\n]\n\nexport function decoder(lines: number[]): string {\n  const code = []\n  const binary = []\n\n  // remove termination bar\n  lines.pop()\n\n  const barThreshold = Math.ceil(lines.reduce((pre, item) => pre + item, 0) / lines.length)\n\n  const minBarWidth = Math.ceil(\n    lines.reduce((pre, item) => {\n      if (item < barThreshold) return (pre + item) / 2\n      return pre\n    }, 0)\n  )\n\n  // leave the padded *\n  for (let i = 0; i < lines.length; i += 1) {\n    let segment = lines[i]\n\n    while (segment > 0) {\n      if (i % 2 === 0) {\n        binary.push(1)\n      } else {\n        binary.push(0)\n      }\n      segment -= minBarWidth\n    }\n  }\n\n  for (let i = 0; i < binary.length; i += 9) {\n    const searcKey = binary.slice(i, i + 9).join('')\n    const char = CHAR_SET.filter(item => Object.keys(item)[0] === searcKey)\n    code.push(char[0][searcKey])\n  }\n\n  if (code.shift() !== '*' || code.pop() !== '*') return ''\n\n  const K = code.pop()\n  let sum = 0\n  let letter: string\n  let Value\n  const findValue = (item: CharValue): boolean => Object.values(item)[0] === letter\n\n  for (let i = code.length - 1; i >= 0; i -= 1) {\n    letter = code[i]\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\n  }\n\n  if (Object.values(CHAR_SET[sum % 47])[0] !== K) return ''\n\n  const C = code.pop()\n  sum = 0\n\n  for (let i = code.length - 1; i >= 0; i -= 1) {\n    letter = code[i]\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0])\n    sum += Value * (1 + ((code.length - (i + 1)) % 20))\n  }\n\n  if (Object.values(CHAR_SET[sum % 47])[0] !== C) return ''\n\n  return code.join('')\n}\n","const CHAR_SET = [\n  'nnwwn',\n  'wnnnw',\n  'nwnnw',\n  'wwnnn',\n  'nnwnw',\n  'wnwnn',\n  'nwwnn',\n  'nnnww',\n  'wnnwn',\n  'nwnwn',\n]\n\nexport function decoder(lines: number[], type?: string): string {\n  const code = []\n\n  const barThreshold = Math.ceil(lines.reduce((pre, item) => (pre + item) / 2, 0))\n\n  if (type === 'interleaved') {\n    // extract start/ends pair\n    const startChar = lines\n      .splice(0, 4)\n      .map((line: number) => (line > barThreshold ? 'w' : 'n'))\n      .join('')\n\n    const endChar = lines\n      .splice(lines.length - 3, 3)\n      .map((line: number) => (line > barThreshold ? 'w' : 'n'))\n      .join('')\n\n    if (startChar !== 'nnnn' || endChar !== 'wnn') return ''\n\n    // Read one encoded character at a time.\n    while (lines.length > 0) {\n      const seg = lines.splice(0, 10)\n\n      const a = seg\n        .filter((item, index) => index % 2 === 0)\n        .map(line => (line > barThreshold ? 'w' : 'n'))\n        .join('')\n\n      code.push(CHAR_SET.indexOf(a))\n\n      const b = seg\n        .filter((item, index) => index % 2 !== 0)\n        .map(line => (line > barThreshold ? 'w' : 'n'))\n        .join('')\n\n      code.push(CHAR_SET.indexOf(b))\n    }\n  } else {\n    // extract start/ends pair\n    const startChar = lines\n      .splice(0, 6)\n      .filter((item: any, index: number) => index % 2 === 0)\n      .map((line: number) => (line > barThreshold ? 'w' : 'n'))\n      .join('')\n\n    const endChar = lines\n      .splice(lines.length - 5, 5)\n      .filter((item: any, index: number) => index % 2 === 0)\n      .map((line: number) => (line > barThreshold ? 'w' : 'n'))\n      .join('')\n\n    if (startChar !== 'wwn' || endChar !== 'wnw') return ''\n\n    // Read one encoded character at a time.\n    while (lines.length > 0) {\n      const a = lines\n        .splice(0, 10)\n        .filter((item, index) => index % 2 === 0)\n        .map(line => (line > barThreshold ? 'w' : 'n'))\n        .join('')\n\n      code.push(CHAR_SET.indexOf(a))\n    }\n  }\n\n  return code.join('')\n}\n","const UPC_SET: {\n  [key: string]: string\n} = {\n  '3211': '0',\n  '2221': '1',\n  '2122': '2',\n  '1411': '3',\n  '1132': '4',\n  '1231': '5',\n  '1114': '6',\n  '1312': '7',\n  '1213': '8',\n  '3112': '9',\n}\n\nexport function decoder(lines: number[], type = '13'): string {\n  let code = ''\n\n  // start indicator/reference lines\n  const bar = (lines[0] + lines[1] + lines[2]) / 3\n\n  // remove start pattern\n  lines.shift()\n  lines.shift()\n  lines.shift()\n\n  // remove end pattern\n  lines.pop()\n  lines.pop()\n  lines.pop()\n\n  // remove middle check pattern\n\n  // remove middle check pattern\n  if (type === '13') {\n    lines.splice(24, 5)\n  } else {\n    lines.splice(16, 5)\n  }\n\n  for (let i = 0; i < lines.length; i += 4) {\n    const group = lines.slice(i, i + 4)\n\n    const digits = [group[0] / bar, group[1] / bar, group[2] / bar, group[3] / bar].map(digit =>\n      digit === 1.5 ? 1 : Math.round(digit)\n    )\n\n    const result = UPC_SET[digits.join('')] || UPC_SET[digits.reverse().join('')]\n\n    if (result) {\n      code += result\n    } else {\n      code += '?'\n    }\n  }\n\n  return code\n}\n","export enum BARCODE_DECODERS {\n  'code-128' = 'code-128',\n  'code-2of5' = 'code-2of5',\n  'code-39' = 'code-39',\n  'code-93' = 'code-93',\n  'ean-13' = 'ean-13',\n  'ean-8' = 'ean-8',\n  'codabar' = 'codabar',\n}\n","export function combineAllPossible(finalResult: string, result: string): string {\n  if (finalResult === '' || result === '') {\n    return result\n  }\n\n  const finalResultArr = finalResult.split('')\n  const resultArr = result.split('')\n\n  resultArr.forEach((char, index) => {\n    if (!finalResultArr[index] || finalResultArr[index] === '?') {\n      if (char && char !== '?') {\n        finalResultArr[index] = char\n      }\n    }\n  })\n\n  return finalResultArr.join('')\n}\n","import { ImageDataLike } from './ImageDataLike'\n\nexport function createImageData(image: HTMLImageElement): ImageDataLike {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) throw new Error('Cannot create canvas 2d context')\n\n  const width = image.naturalWidth\n  const height = image.naturalHeight\n\n  canvas.width = width\n  canvas.height = height\n  ctx.drawImage(image, 0, 0)\n\n  return ctx.getImageData(0, 0, width, height)\n}\n","import * as Jimp from 'jimp'\nimport { createImageData } from './createImageData'\nimport { ImageDataLike } from './ImageDataLike'\nimport { isUrl } from './isUrl'\n\nconst isNode = typeof process === 'object' && process.release && process.release.name === 'node'\n\nexport async function getImageDataFromSource(\n  source: string | HTMLImageElement | HTMLCanvasElement\n): Promise<ImageDataLike> {\n  return new Promise((resolve, reject) => {\n    if (typeof source === 'string') {\n      if (source.startsWith('#')) {\n        const imageElement = document.getElementById(source.substr(1))\n\n        if (imageElement instanceof HTMLImageElement) {\n          resolve(createImageData(imageElement))\n        }\n\n        if (imageElement instanceof HTMLCanvasElement) {\n          const ctx = imageElement.getContext('2d')\n          if (!ctx) throw new Error('Cannot create canvas 2d context')\n          resolve(ctx.getImageData(0, 0, imageElement.width, imageElement.height))\n        }\n\n        reject(new Error('Invalid image source specified!'))\n      } else if (isUrl(source)) {\n        const img = new Image()\n        img.onerror = reject\n        img.onload = (): void => resolve(createImageData(img))\n        img.src = source\n      } else if (isNode) {\n        Jimp.read(source, (err, image) => {\n          if (err) {\n            reject(err)\n          } else {\n            const { data, width, height } = image.bitmap\n\n            resolve({\n              data: Uint8ClampedArray.from(data),\n              width,\n              height,\n            })\n          }\n        })\n      }\n    } else if (source instanceof HTMLImageElement) {\n      resolve(createImageData(source))\n    } else if (source instanceof HTMLCanvasElement) {\n      const ctx = source.getContext('2d')\n      if (!ctx) throw new Error('Cannot create canvas 2d context')\n      resolve(ctx.getImageData(0, 0, source.width, source.height))\n    }\n  })\n}\n","export function getLines(data: Uint8ClampedArray, width: number, height: number): number[] {\n  const lines: number[] = []\n  const channels = data.length / (width * height)\n  let count = 0\n  let columnAverageLast = 0\n\n  for (let column = 0; column < width; column += 1) {\n    let columnSum = 0\n    let columnAverage = 0\n\n    for (let row = 0; row < height; row += 1) {\n      const index = (row * width + column) * channels\n      columnSum += Math.sqrt((data[index] ** 2 + data[index + 1] ** 2 + data[index + 2] ** 2) / 3)\n    }\n\n    // pixels are same in column\n    columnAverage = columnSum / height >= 127 ? 255 : 0\n\n    // skip white padding in the start & end\n    if (columnAverage === 255 && count === 0) continue\n\n    // count line width\n    if (columnAverage === columnAverageLast) {\n      count += 1\n    } else {\n      lines.push(count)\n      columnAverageLast = columnAverage\n      count = 1\n    }\n\n    // skip padding in the last\n    if (column === width - 1 && columnAverage === 0) {\n      lines.push(count)\n    }\n  }\n\n  return lines\n}\n","// available decoders\nimport * as codabar from './codabar'\nimport * as code128 from './code-128'\nimport * as code39 from './code-39'\nimport * as code93 from './code-93'\nimport * as code2of5 from './code2of5'\nimport * as ean from './ean'\nimport { applyAdaptiveThreshold } from './utilities/adaptiveThreshold'\nimport { BARCODE_DECODERS } from './utilities/BARCODE_DECODERS'\nimport { combineAllPossible } from './utilities/combineAllPossible'\nimport { getImageDataFromSource } from './utilities/getImageDataFromSource'\nimport { getLines } from './utilities/getLines'\nimport { ImageDataLike } from './utilities/ImageDataLike'\n\n// detect test env\nlet isTestEnv: boolean\ntry {\n  if (process && process.env.NODE_ENV === 'test') {\n    isTestEnv = true\n  }\n} catch {\n  isTestEnv = false\n}\n\nfunction isImageLike(object: any): object is ImageDataLike {\n  return object.data && object.width && object.height\n}\n\ntype JavascriptBarcodeReader = {\n  image: string | HTMLImageElement | HTMLCanvasElement | ImageDataLike\n  barcode: string | BARCODE_DECODERS\n  barcodeType?: string\n  options?: {\n    useAdaptiveThreshold?: boolean\n    singlePass?: boolean\n  }\n}\n\ninterface DecoderFunction {\n  (lines: number[], type?: string): string\n}\n\nexport default async function javascriptBarcodeReader({\n  image,\n  barcode,\n  barcodeType,\n  options,\n}: JavascriptBarcodeReader): Promise<string> {\n  let decoder: DecoderFunction\n\n  switch (barcode) {\n    case BARCODE_DECODERS.codabar:\n      decoder = codabar.decoder\n      break\n    case BARCODE_DECODERS['code-128']:\n      decoder = code128.decoder\n      break\n    case BARCODE_DECODERS['code-39']:\n      decoder = code39.decoder\n      break\n    case BARCODE_DECODERS['code-93']:\n      decoder = code93.decoder\n      break\n    case BARCODE_DECODERS['code-2of5']:\n      decoder = code2of5.decoder\n      break\n    case BARCODE_DECODERS['ean-13']:\n      decoder = ean.decoder\n      barcodeType = '13'\n      break\n    case BARCODE_DECODERS['ean-8']:\n      decoder = ean.decoder\n      barcodeType = '8'\n      break\n    default:\n      throw new Error(`Invalid barcode specified. Available decoders: ${BARCODE_DECODERS}.`)\n  }\n\n  const useSinglePass = isTestEnv || (options && options.singlePass) || false\n  const { data, width, height } = isImageLike(image) ? image : await getImageDataFromSource(image)\n  const channels = data.length / (width * height)\n  let finalResult = ''\n\n  // apply adaptive threshold\n  if (options && options.useAdaptiveThreshold) {\n    applyAdaptiveThreshold(data, width, height)\n  }\n\n  // check points for barcode location\n  const searchPoints = [5, 6, 4, 7, 3, 8, 2, 9, 1]\n  const searchLineStep = Math.round(height / searchPoints.length)\n  const rowsToScan = Math.min(2, height)\n\n  for (let i = 0; i < searchPoints.length; i += 1) {\n    const start = channels * width * Math.floor(searchLineStep * searchPoints[i])\n    const end = start + rowsToScan * channels * width\n    const lines = getLines(data.slice(start, end), width, rowsToScan)\n\n    if (lines.length === 0) {\n      if (useSinglePass || i === searchPoints.length - 1) {\n        throw new Error('Failed to detect lines in the image!')\n      }\n\n      continue\n    }\n\n    // Run the decoder\n    const result = decoder(lines, barcodeType)\n\n    if (!result) continue\n    else if (useSinglePass || !result.includes('?')) return result\n\n    finalResult = combineAllPossible(finalResult, result)\n    if (!finalResult.includes('?')) return finalResult\n  }\n\n  return finalResult\n}\n","export function isUrl(s: string): boolean {\n  const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n\n  if (s.startsWith('#')) return false\n\n  return regexp.test(s)\n}\n","export function applyAdaptiveThreshold(\n  data: Uint8ClampedArray,\n  width: number,\n  height: number\n): Uint8ClampedArray {\n  const integralImage = new Array(width * height).fill(0)\n  const channels = data.length / (width * height)\n  const t = 0.15 // threshold percentage\n  const s = Math.floor(height) // bracket size\n  const s2 = Math.floor(s / 2)\n\n  for (let i = 0; i < width; i += 1) {\n    let sum = 0\n    for (let j = 0; j < height; j += 1) {\n      const pureIndex = j * width + i\n      const index = pureIndex * channels\n      // greyscale\n      const v = (data[index] + data[index + 1] + data[index + 2]) / 3\n\n      data[index] = v\n      data[index + 1] = v\n      data[index + 2] = v\n      sum += v\n\n      if (i === 0) {\n        integralImage[pureIndex] = sum\n      } else {\n        integralImage[pureIndex] = integralImage[pureIndex - 1] + sum\n      }\n    }\n  }\n\n  // skip edge rows\n  for (let i = 0; i < width; i += 1) {\n    for (let j = 0; j < height; j += 1) {\n      const pureIndex = j * width + i\n      const index = pureIndex * channels\n      // no. of pixels per window\n      let x1 = i - s2\n      let x2 = i + s2\n      let y1 = j - s2\n      let y2 = j + s2\n\n      if (x1 < 0) x1 = 0\n      if (x2 >= width) x2 = width - 1\n      if (y1 < 0) y1 = 0\n      if (y2 >= height) y2 = height - 1\n\n      const count = (x2 - x1) * (y2 - y1)\n      const sum =\n        integralImage[y2 * width + x2] -\n        integralImage[y1 * width + x2] -\n        integralImage[y2 * width + x1] +\n        integralImage[y1 * width + x1]\n      let v = 255\n\n      if (data[index] * count < sum * (1 - t)) {\n        v = 0\n      }\n\n      data[index] = v\n      data[index + 1] = v\n      data[index + 2] = v\n    }\n  }\n\n  return data\n}\n"],"names":["CHAR_SET","nnnnnww","nnnnwwn","nnnwnnw","wwnnnnn","nnwnnwn","wnnnnwn","nwnnnnw","nwnnwnn","nwwnnnn","wnnwnnn","nnnwwnn","nnwwnnn","wnnnwnw","wnwnnnw","wnwnwnn","nnwwwww","nnwwnwn","nnnwnww","nwnwnnw","nnnwwwn","decoder","lines","code","barThreshold","Math","ceil","reduce","pre","item","length","a","splice","map","line","join","push","WIDTH_TBL","TBL_A","TBL_B","TBL_C","letterKey","letterCodePrev","lookupTBL","computedLines","count","factor","i","round","computeGroup","pop","slice","letterCode","indexOf","charCodeAt","nnnwwnwnn","wnnwnnnnw","nnwwnnnnw","wnwwnnnnn","nnnwwnnnw","wnnwwnnnn","nnwwwnnnn","nnnwnnwnw","wnnwnnwnn","nnwwnnwnn","wnnnnwnnw","nnwnnwnnw","wnwnnwnnn","nnnnwwnnw","wnnnwwnnn","nnwnwwnnn","nnnnnwwnw","wnnnnwwnn","nnwnnwwnn","nnnnwwwnn","wnnnnnnww","nnwnnnnww","wnwnnnnwn","nnnnwnnww","wnnnwnnwn","nnwnwnnwn","nnnnnnwww","wnnnnnwwn","nnwnnnwwn","nnnnwnwwn","wwnnnnnnw","nwwnnnnnw","wwwnnnnnn","nwnnwnnnw","wwnnwnnnn","nwwnwnnnn","nwnnnnwnw","wwnnnnwnn","nwwnnnwnn","nwnwnwnnn","nwnwnnnwn","nwnnnwnwn","nnnwnwnwn","nwnnwnwnn","sequenceBar","shift","binary","minBarWidth","segment","searcKey","char","filter","Object","keys","K","letter","Value","sum","findValue","values","C","type","startChar","endChar","seg","index","b","UPC_SET","bar","group","digits","digit","result","reverse","BARCODE_DECODERS","combineAllPossible","finalResult","finalResultArr","split","forEach","createImageData","image","canvas","document","createElement","ctx","getContext","Error","width","naturalWidth","height","naturalHeight","drawImage","getImageData","isNode","process","release","name","getLines","data","channels","columnAverageLast","column","columnSum","columnAverage","row","sqrt","isTestEnv","env","NODE_ENV","barcode","barcodeType","options","codabar","codabar.decoder","code128.decoder","code39.decoder","code93.decoder","code2of5.decoder","ean.decoder","useSinglePass","singlePass","object","source","Promise","resolve","reject","startsWith","imageElement","getElementById","substr","HTMLImageElement","HTMLCanvasElement","s","test","img","Image","onerror","onload","src","Jimp","read","err","bitmap","Uint8ClampedArray","from","getImageDataFromSource","useAdaptiveThreshold","integralImage","Array","fill","floor","s2","j","pureIndex","v","x1","x2","y1","y2","applyAdaptiveThreshold","searchPoints","searchLineStep","rowsToScan","min","start","end","includes"],"mappings":"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"}